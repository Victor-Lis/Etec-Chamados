// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String   @id @default(uuid())
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mesas {
  id           String      @id @default(uuid())
  mesa         Int
  atendente_id String?
  Chamados     Chamados[]
  Atendentes   Atendentes? @relation(fields: [atendente_id], references: [id])
}

model Atendentes {
  id    String  @id @default(uuid())
  name  String
  email String
  Mesas Mesas[]
}

model Chamados {
  id           Int       @id @default(autoincrement())
  time_start   DateTime  @default(now())
  time_end     DateTime?
  preferencial Boolean
  atendido     Boolean
  Mesa         Mesas?    @relation(fields: [mesa_id], references: [id])
  mesa_id      String?
}
